#+TITLE: Memetalk TODO

* 0.0.1
** VM (Major Issues)
   * Co-routines, Continuations, Concurrency (e.g. actors)
   * GC
** Compilation (Major Issues) [0/0]
*** DONE Compiler written in Memescript (dump python)
*** TODO Loader written in MemeScript (dump C++ loader)
    * Implement remote loader, caching of .mec files and respecting
      version information.
*** DONE Improve compilation performance
    * move object_table to be the first section in .mec and compute cells as
      they are appended to vmemory, so it doesn't require a base
      address. Measure the results.
*** TODO Monitor Performance [0/2]
    * [ ] Dashboard for visualizing metrics
    * [ ] Collect metrics from VM and push to dashboard
** Network [1/3]
    * [X] Socket API
    * [-] HTTP Server
    * [ ] HTTP Client
** Debugger Misc [0/1]
   * [ ] rewind-and-go: recompile previous function, rewind to it,
     execute, and break in the same spot it was before. return
     prematurely from function with a specific value?
** Emacs mode [0/3]
   * [ ] Use ~/.meme.config to find .me files
   * [ ] Fix Indentation
   * [ ] Update indentation & highlight to new preamble syntax
   * [ ] Some kind of inspector, where we can easily inspect and
     introspect on values.
   * [ ] A way to visualize the current stack trace.
   * [ ] Enable inspecting field variables.
** Ecosystem
   * SDE: revamp the Qt based thing? Might depend on first solidify
     package / module import w/ vesion.  (which depends on the loader
     be written in Memescript)
** Library
  * Thoughtful implementation of Integers, Floats, Bignums, Strings,
    Dicts (with hashed keys), ....
  * Thoughtful design of mirroring / reflection api.
  * "Standard Library": IO, socket, http, signals, threads, etc. might
    depend on packaging / module w/ versioning being properly
    implemented.
** Other Miscelaneous
  * Decide on case style: camel/underline / for what. It's a mess.
  * Fix aliasing of module functions: "[print] <= module"; won;t work.
  * Review imod layout: self referencing vt sounds too fragile?
  * Implement varargs properly.
  * Clean up C macros and type checking -- some type checking was
    disabled/commented out because the functions were moved to .h
    files and the macros that perform type check were not defined
    there.
  * Enable mmobj's type-checking on release build.
  * Port loader to memescript; add loader path to header in .mec files so the
    vm can select the correct loader.
  * Try to clean up C macros (ugh!).
  * Implement shortcircuit or/and
  * Analyze possibility of left to right evaluation of expressions.
  * Fix closure tests that need recompilation, to use memescript compiler.
  * Organize core.me -- move garbage & inessentials out.
  * Fix g++ warnings.
** Optimizations
  * Add VM internal bytecodes for all core/prims. Substitute SEND
    operations to the corresponding internal bytecode during execution
    (note: these bytecodes should not be known / emitted by the
    compiler, in which case abstraction is lost, e.g., the ability to
    overwrite such operations in the high level). Obs: careful with
    subclasses inheriting prim operation.
  * Mix the above approach with JIT and evaluate results.
** Future
   * Play with type systems
