meme central:memescript/0.0.3/compiler

@author: Lincoln Clarete <lincoln@clarete.li>;
@license: MIT;

requires io, ext, vm, ometa_base, definitions_pr, definitions_tr
where
  io = central:linux/0.0.1/io
  ext = central:std/0.0.3/ext
  vm = central:reflection/0.0.1/vm
  ometa_base = central:ometa/0.0.2/ometa_base
  definitions_pr = central:bindgen/0.0.1/definitions_pr
  definitions_tr = central:bindgen/0.0.1/definitions_tr

  import SyscallDefinitionsParser from definitions_pr
  import SyscallDefinitionsTranslator from definitions_tr
end

// This program reads a file containing definitions of C functions and
// generates code with the C calls wrapped with the MemeTalk API to
// make the C call available to MemeTalk code.
//
// This format was found and adopted from the one used by the Go
// lang. Huge thanks for the inspiration!
//
// The definitions are not in any specific format. That's neither C,
// MemeTalk nor anything else. Here are the only rules you must follow
// to write definition files:
//
// * The format supports the definition of structs and C functions
//   only. No C++ for now :(
//
// * Everything happens within comments. Someday this could become an
//   extension for the meme compiler and it'd read directly the file
//   using the bindings annotated with comments with this format
//
// * You don't have to declare the fields of the struct that you don't
//   need to access them in MemeTalk code. If you don't need any
//   field. Just declare it like this: `struct mystruct;`
//
// * structs can be defined with the `struct` keyword and members will
//   be defined between curly brackets and separated with a semicolon.
//   E.g.:
//
//     struct {}

// Custom callback wrappers must extend this class
class CallbackData
  fields: proc, callback, data;
  init new: fun(callback, data) {
    @proc = vm.get_current_process();
    @callback = callback;
    @data = data;
  }
end

class Callback
  fields: c_callback, callback, data;
  init new: fun(callback) {
    this.set_c_callback();
    @callback = callback;
  }
  init new_with_data: fun(callback, data) {
    this.set_c_callback();
    @callback = callback;
    @data = data;
  }
  instance_method data: fun() {
    return CallbackData.new(@callback, @data);
  }
  instance_method set_c_callback: fun () {
    Exception.throw("Callback setting not implement");
  }
end

// Shortcuts
parseRule: fun(content, rule) {
  return ometa_base.parse(content, SyscallDefinitionsParser, rule)[1];
}
parse: fun(content) {
  return parseRule(content, :start);
}
translateRule: fun(defs, rule, args) {
  var output = null;
  if (args == null) {
    output = ometa_base.parse(
      defs, SyscallDefinitionsTranslator, rule);
  } else {
    output = ometa_base.parse_with_args(
      defs, SyscallDefinitionsTranslator, rule, args);
  }
  if (output[0]) {
    Exception.throw(output[0].toString);
  }
  return output[1];
}
translate: fun(defs) {
  return translateRule(defs, :start, null);
}
translateStringAtRule: fun (contents, rule, args) {
  return translateRule([parse(contents)], rule, args);
}
translateString: fun(contents, name) {
  return translateStringAtRule(contents, :module, [name]);
}
main: fun() {
  var args = ext.argv();
  if (args.size() == 2) {
    var path = args[1];
    var contents = io.read_file(path);

    // File name without extension will name the primitives module
    var fileName = path.split("/").last().split(".")[0];
    io.print(translateString(contents, fileName));
  }
  return 0;
}
